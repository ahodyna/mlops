import re
import shutil
from pathlib import Path


def extract_number_from_filename(filename):
    """–í–∏—Ç—è–≥—É—î –Ω–æ–º–µ—Ä –∑ –∫—ñ–Ω—Ü—è –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É"""
    # –î–ª—è –∞–Ω–æ—Ç–∞—Ü—ñ–π: "0ed06d6a_13.txt" -> 13
    # –î–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å: "13.png" -> 13
    
    stem = Path(filename).stem
    
    match = re.search(r'_(\d+)$', stem) 
    if match:
        return int(match.group(1))
    
    if stem.isdigit():
        return int(stem)
    
    match = re.search(r'(\d+)$', stem)
    if match:
        return int(match.group(1))
    
    return None


def create_number_based_mapping():
    
    print(" –°—Ç–≤–æ—Ä–µ–Ω–Ω—è mapping –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–º–µ—Ä—ñ–≤...")
    
    image_dir = Path('dataset/images')
    label_dir = Path('dataset/labels')
    
    image_files = [f for f in image_dir.glob('*') if f.suffix.lower() in ['.jpg', '.jpeg', '.png', '.bmp']]
    label_files = [f for f in label_dir.glob('*.txt')]
    
    print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ:")
    print(f"   - –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(image_files)}")
    print(f"   - –ê–Ω–æ—Ç–∞—Ü—ñ—ó: {len(label_files)}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫–∏ –Ω–æ–º–µ—Ä -> —Ñ–∞–π–ª
    image_map = {}  # –Ω–æ–º–µ—Ä -> —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    label_map = {}  # –Ω–æ–º–µ—Ä -> —Ñ–∞–π–ª –∞–Ω–æ—Ç–∞—Ü—ñ—ó
    
    print(f"\nüîç –ê–Ω–∞–ª—ñ–∑ –Ω–æ–º–µ—Ä—ñ–≤ –≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è—Ö:")
    for img_file in image_files:
        number = extract_number_from_filename(img_file.name)
        if number is not None:
            image_map[number] = img_file
            print(f"   {img_file.name} ‚Üí –Ω–æ–º–µ—Ä {number}")
        else:
            print(f"    –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –Ω–æ–º–µ—Ä –∑ {img_file.name}")
    
    print(f"\n –ê–Ω–∞–ª—ñ–∑ –Ω–æ–º–µ—Ä—ñ–≤ –≤ –∞–Ω–æ—Ç–∞—Ü—ñ—è—Ö:")
    for lbl_file in label_files:
        number = extract_number_from_filename(lbl_file.name)
        if number is not None:
            label_map[number] = lbl_file
            print(f"   {lbl_file.name} ‚Üí –Ω–æ–º–µ—Ä {number}")
        else:
            print(f"    –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –Ω–æ–º–µ—Ä –∑ {lbl_file.name}")
    
    common_numbers = set(image_map.keys()) & set(label_map.keys())
    
    print(f"\n –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ mapping:")
    print(f"   - –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(image_map)}")
    print(f"   - –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –∞–Ω–æ—Ç–∞—Ü—ñ–π: {len(label_map)}")
    print(f"   - –°–ø—ñ–≤–ø–∞–¥—ñ–Ω—å: {len(common_numbers)}")
    
    if len(common_numbers) > 0:
        print(f"\n –ó–Ω–∞–π–¥–µ–Ω—ñ –ø–∞—Ä–∏:")
        
        output_dir = Path('dataset_numbered')
        output_img_dir = output_dir / 'images'
        output_lbl_dir = output_dir / 'labels'
        
        if output_dir.exists():
            shutil.rmtree(output_dir)
        
        output_img_dir.mkdir(parents=True)
        output_lbl_dir.mkdir(parents=True)
        
        successful_pairs = 0
        
        for number in sorted(common_numbers):
            img_file = image_map[number]
            lbl_file = label_map[number]
            
            new_img_name = f"dog_{number:04d}{img_file.suffix}"
            new_lbl_name = f"dog_{number:04d}.txt"
            
            try:
               
                shutil.copy2(img_file, output_img_dir / new_img_name)
                shutil.copy2(lbl_file, output_lbl_dir / new_lbl_name)
                
                print(f"   {number:2d}: {img_file.name} + {lbl_file.name} ‚Üí dog_{number:04d}")
                successful_pairs += 1
                
            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ –Ω–æ–º–µ—Ä–æ–º {number}: {e}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ dataset.yaml
        yaml_content = f"""# Dataset for dog detection training
path: dataset_numbered
train: images
val: images
nc: 1
names:
  0: dog
"""
        
        with open('dataset_numbered.yaml', 'w', encoding='utf-8') as f:
            f.write(yaml_content)
        
        print(f"\n Mapping –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"   - –£—Å–ø—ñ—à–Ω–∏—Ö –ø–∞—Ä: {successful_pairs}")
        print(f"   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: dataset_numbered/")
        print(f"   - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: dataset_numbered.yaml")
    
        missing_images = set(label_map.keys()) - set(image_map.keys())
        missing_labels = set(image_map.keys()) - set(label_map.keys())
        
        if missing_images:
            print(f"\n –ê–Ω–æ—Ç–∞—Ü—ñ—ó –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å (–Ω–æ–º–µ—Ä–∏): {sorted(list(missing_images)[:10])}")
        if missing_labels:
            print(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–∑ –∞–Ω–æ—Ç–∞—Ü—ñ–π (–Ω–æ–º–µ—Ä–∏): {sorted(list(missing_labels)[:10])}")
        
        if successful_pairs > 0:
            print(f"\n –ì–æ—Ç–æ–≤–æ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:")
            print(f"   python src/train_yolo.py --epochs 5 --batch 4")
            print(f"   (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ dataset_numbered.yaml)")
        
        return successful_pairs > 0
    
    else:
        print(f"\n –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
        print(f" –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ –Ω–æ–º–µ—Ä–∏ –≤ –Ω–∞–∑–≤–∞—Ö —Ñ–∞–π–ª—ñ–≤ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å")
        return False


if __name__ == "__main__":
    create_number_based_mapping()