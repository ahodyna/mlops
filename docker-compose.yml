services:
  minio:
    image: "minio/minio:${MINIO_VERSION:-RELEASE.2025-04-22T22-12-26Z}"
    command: server /data --console-address ":9009"
    restart: unless-stopped
    ports:
      - "9000:9000"      # S3-API
      - "9009:9009"      # Web-консоль MinIO
    environment:
      MINIO_ROOT_USER:     ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - ./minio-data:/data
    networks: [appnet]
   
  db:
    image: pgautoupgrade/pgautoupgrade:13-alpine
    hostname: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ""
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks: [appnet]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
   
  mlflow:
    image: python:3.9-slim
    hostname: mlflow
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
    ports:
      - "5001:5000"
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://postgres@db:5432/postgres
      MLFLOW_DEFAULT_ARTIFACT_ROOT: s3://mlflow-artifacts
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      PYTHONUNBUFFERED: 1
    command: >
      bash -c "
        pip install mlflow==2.10.2 psycopg2-binary boto3 &&
        mlflow ui --host 0.0.0.0 --port 5000
      "
    volumes:
      - ./scripts:/scripts
    networks: [appnet]
   
  app:
    image: heartexlabs/label-studio:latest  
    build: .                                
    restart: unless-stopped
    depends_on: [db]
    ports:
      - "8080:8000"    
    environment:
      DJANGO_DB: default
      POSTGRE_NAME:     postgres
      POSTGRE_USER:     postgres
      POSTGRE_PASSWORD: ""
      POSTGRE_PORT:     5432
      POSTGRE_HOST:     db
      LABEL_STUDIO_HOST: ${LABEL_STUDIO_HOST:-}
      JSON_LOG: "1"
    volumes:
      - ./mydata:/label-studio/data
    command: label-studio-uwsgi
    networks: [appnet]

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks: [appnet]

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks: [appnet]
   
  dog-detection-api:
    build:
      context: ./dog-detection-api
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - mlflow
      - minio
      - prometheus
    ports:
      - "8001:8000"
    environment:
      MLFLOW_URI: http://mlflow:5000
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BUCKET: mlflow-artifacts
      PYTHONUNBUFFERED: 1
    volumes:
      - ./test_images:/app/test_images
      - ./inference_results:/app/inference_results
    networks: [appnet]
   
networks:
  appnet:

volumes:
  prometheus-data:
  grafana-data: