name: YOLO ML Pipeline
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
   
    - name: Start MLOps infrastructure
      run: |
        docker compose up -d minio mlflow db
        sleep 30
   
    - name: Wait for services to be ready
      run: |
        echo "üîç Checking service status..."
        docker compose ps
       
        echo "‚è≥ Waiting for services to be ready..."
        # Wait for containers to be running and healthy
        for i in {1..20}; do
          if docker compose ps | grep -E "(healthy|Up)" | wc -l | grep -q "3"; then
            echo "‚úÖ All services are running!"
            break
          fi
          echo "Waiting for services... ($i/20)"
          sleep 3
        done
       
        # Give services additional time to fully initialize
        echo "üïê Allowing services to fully initialize..."
        sleep 20
       
        echo "üìä Final service status:"
        docker compose ps
        echo "‚úÖ Infrastructure is ready"

  train:
    needs: setup-infrastructure
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
   
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
   
    - name: Install system dependencies for OpenCV
      run: |
        echo "üì¶ Installing system dependencies..."
        apt-get update
        apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1 \
          libgtk-3-dev \
          ffmpeg \
          libavcodec-dev \
          libavformat-dev \
          libswscale-dev \
          libv4l-dev \
          libxvidcore-dev \
          libx264-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libatlas-base-dev \
          python3-dev
        echo "‚úÖ System dependencies installed"
   
    - name: Install training dependencies
      run: |
        echo "üêç Installing Python packages..."
        pip install --upgrade pip
        pip install torch torchvision ultralytics mlflow minio pandas pyyaml opencv-python-headless boto3
        echo "‚úÖ Training dependencies installed"
   
    - name: Verify dataset
      run: |
        echo "üìÅ Checking dataset..."
        ls -la dataset_numbered/
        echo "‚úÖ Dataset ready"
   
    - name: Train YOLO model
      run: |
        echo "üöÄ Starting training..."
        export QT_QPA_PLATFORM=offscreen
        export MPLBACKEND=Agg
        export OPENCV_IO_ENABLE_OPENEXR=1
        python src/train_yolo.py --epochs 10 --batch 2 --name ci_cd_run
   
    - name: Verify model saved to MinIO
      run: |
        echo "‚úÖ Training completed, model saved to MinIO"

  deploy:
    needs: train
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
   
    - name: Deploy API service (–±–µ–∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É)
      run: |
        echo "üöÄ Deploying dog detection API..."
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ API, —É–Ω–∏–∫–∞—é—á–∏ prometheus –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å
        docker compose up -d minio mlflow db
        sleep 10
        docker compose up -d dog-detection-api
        sleep 20
   
    - name: Wait for API to be ready
      run: |
        echo "‚è≥ Waiting for API service..."
        for i in {1..15}; do
          if docker compose ps dog-detection-api | grep -q "Up"; then
            echo "‚úÖ API service is running!"
            break
          fi
          echo "Waiting for API... ($i/15)"
          sleep 4
        done
        echo "‚úÖ API is ready at http://localhost:8001"
   
    - name: Show service status
      run: |
        echo "üìä Services status:"
        docker compose ps
        echo ""
        echo "üåê Available endpoints:"
        echo "   - API: http://localhost:8001"
        echo "   - MLFlow: http://localhost:5001"
        echo "   - MinIO Console: http://localhost:9009"
        echo ""
        echo "üéØ Ready for manual testing!"
        echo "   You can now make predictions via: http://localhost:8001/predict"

  keep-services-running:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Services ready for manual testing
      run: |
        echo "‚úÖ Pipeline completed successfully!"
        echo "üîó All services are running and ready for manual testing"
        echo "üìù To test predictions manually:"
        echo "   1. Go to http://localhost:8001/docs"
        echo "   2. Use /predict endpoint with your images"
        echo "   3. Check MLFlow at http://localhost:5001 for training metrics"
        echo ""
        echo "‚ö†Ô∏è  Note: Services will keep running until you manually stop them"
        echo "    To stop: docker compose down"